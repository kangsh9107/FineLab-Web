CREATE OR REPLACE PROCEDURE etl_process IS
  v_directory_name VARCHAR2(100) := 'EXCEL_DIRECTORY'; -- 엑셀 파일이 저장된 디렉토리
  v_file_name VARCHAR2(100) := 'data.xlsx'; -- 엑셀 파일명
  v_sheet_name VARCHAR2(100) := 'Sheet1'; -- 엑셀 시트명
BEGIN
  -- 1. 엑셀 파일 불러오기
  DECLARE
    v_file_handle UTL_FILE.FILE_TYPE;
    v_line VARCHAR2(4000);
    v_column1 VARCHAR2(100);
    v_column2 VARCHAR2(100);
  BEGIN
    v_file_handle := UTL_FILE.FOPEN(v_directory_name, v_file_name, 'R');

    LOOP
      UTL_FILE.GET_LINE(v_file_handle, v_line);
      
      -- 데이터 변환 및 추출
      v_column1 := SUBSTR(v_line, 1, 100);
      v_column2 := SUBSTR(v_line, 101, 100);

      -- 2. 임시 테이블에 저장
      INSERT INTO staging_table(column1, column2)
      VALUES (v_column1, v_column2);
    END LOOP;

    UTL_FILE.FCLOSE(v_file_handle);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL; -- 파일 읽기 완료
    WHEN OTHERS THEN
      -- 에러 처리 로직
      UTL_FILE.FCLOSE(v_file_handle);
      RAISE;
  END;

  -- 3. 유효성 검사
  FOR row_data IN (SELECT * FROM staging_table) LOOP
    IF some_validation_condition THEN
      -- 유효성 검사 실패 처리 로직
      -- 예를 들어, 잘못된 데이터를 로그 테이블에 기록하거나 건너뛰는 등의 처리
      CONTINUE; -- 다음 루프로 이동
    END IF;
    
    -- 4. 최종 테이블에 저장
    INSERT INTO destination_table(column1, column2)
    VALUES (row_data.column1, row_data.column2);
  END LOOP;
  
  -- 임시 테이블 비우기
  DELETE FROM staging_table;

  -- 필요한 경우 트랜잭션 커밋
  COMMIT;
EXCEPTION
  -- 예외 처리 코드 추가
  WHEN OTHERS THEN
    -- 에러 처리 로직
    ROLLBACK;
    RAISE;
END;
/