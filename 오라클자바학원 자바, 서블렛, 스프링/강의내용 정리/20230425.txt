1. 배열
  1) basic > ArrayTest03
	2차원 배열
	int[][] 행, 열을 뜻함
		이름    국어 영어 수학 철학
		------------------------------
		손흥민 100   90   80   70
		류현진 90    80   70   60
		이강인 80    70   60   50
			손흥민 수학은 0행 2열
			2차원 배열의 길이는 안에 들어있는 1차원 배열의 개수. 3행이니까 길이는 3이다.
	3차원
		이름    국어 영어 수학 철학
		------------------------------
		손흥민 100   90   80   70
		류현진 90    80   70   60
		이강인 80    70   60   50

		이름    국어 영어 수학 철학
		------------------------------
		손흥민 50    90   80   70
		류현진 90    80   70   60
		이강인 80    70   60   50
			손흥민 국어 50점은 0번 지표의 0행 0열

2. 메소드
  1) basic > MethodTest01
	return의 사용
		메소드 강제종료
		값의 반환
  2) 메소드 오버로딩(Overloading)
	한 클래스 안에 메소드 명은 같으나 매개변수 개수나 타입이 다른 메소드를 여러개 정의. 반환타입은 같아도 되고 달라도 된다.

3. basic > Hello
	args 사용법
		Run As > Run Configurations > 클래스 선택하고 Arguments에 args 작성 후 Apply

4. 클래스(개발자가 정의한 데이터타입), 객체, 인스턴스, 멤버
	자바는 모든 걸 객체 본다. 예외조차 익셉션 타입의 객체다.

5. oop01.object > Point2D, PointTest
	클래스를 먼저 정의 후 new 연산자를 이용해서 객체(인스턴스) 생성

6. oop01.object > Point2D, PointTest
	정보은폐(Information Hiding) 혹은 캡슐화(Encapsulation)
		멤버필드를 private로 설정 후 메소드를 이용해서 데이터에 접근
		게터, 세터로 데이터에 접근. Source > Generate Getters and Setters로 게터, 세터 쉽게 생성가능.

7. oop01.object > Point2D, PointTest, Point3D
	상속(Inheritance)
	  1) 상위 클래스의 멤버를 그대로 물려 받는 것
	  2) extends 키워드 사용
	  3) 메소드 오버라이딩(overriding)
		상위 클래스로부터 물려받은 메소드를 재정의. 메소드 명, 매개변수 개수나 타입, 반환타입이 모두 같아야 한다.
		어노테이션(annotation)
	  4) 자바는 직접적인 다중상속을 허용하지 않는다. 인터페이스는 다중상속 가능

8. oop01.object > Point2D, PointTest
	생성자(Constructor)
	  1) 클래스 이름과 같고, 반환형이 없다.
	  2) 개발자가 따로 정의해주지 않으면 기본(디폴트) 생성자가 자동으로 생성된다.
	  3) 자기자신의 오버로딩한 생성자를 호출 시 this 키워드 사용. 첫 줄에 작성한다.
	  4) 하위 클래스의 생성자는 반드시 상위 클래스의 생성자를 호출해야한다. 호출하지 않으면 상위 클래스의 기본생성자를 호출한다.

9. static
	1) oop02.static01 > Account, AccountTest
		메모리 공유
	2) oop02.static02 > Calculator, CalTest
		클래스명.변수명, 클래스명,메소드명으로 접근가능
	3) oop02.static03 > Person, PersonTest
		static 함부로 쓰지 않기

10. oop03.modifier > Point2D, Point3D, PointTest
	접근제한자(접근제어자, Access modifier)

	접근제한자	클래스내부	패키지내부	상속관계		관계없음
	===========================================================
	public		O		O		O		O
	default		O		O		O		X	
	protected	O		O		X		X
	private		O		X		X		X

11. oop01.object > Point2D
	final
	  1) 클래스에 final이 붙으면 상속되지 않음
	  2) 메소드에 final이 붙으면 오버라이딩 되지 않음
	  3) 변수에 fianl이 붙으면 값을 재할당할 수 없음

12. oop04.poly01 > Point2D, Point3D, PointTest
     oop04.poly02 > Animal, Dog, Cat, Tiger, AnimalTest
	다형성(Polymorphism)
	: 하위 클래스 타입의 객체(인스턴스)를 상위 클래스 타입의 변수로 참조 가능
		Upcasting, Downcasting

13. oop05.abstract01 > Shape, Circle, Rectangle, Triangle, ShapeTest
     oop05.abstract02 > Animal, Dog, Cat, Tiger, AnimalTest
	추상(abstract) 클래스
	  1) 한 클래스 안에 추상 메소드가 하나 이상 존재하면 그 클래스도 추상 클래스로 만들어야 한다.
	  2) 추상 클래스를 상속받는 하위 클래스는 반드시 추상 메소드를 오버라이딩 해야 한다.
	  3) new 연산자를 사용해 직접 객체를 만들 수 없다.
	instanceof 연산자

14. 객체지향 프로그래밍
	사물을 최대한 단순화 시켜서 오브젝트를 향해서 프로그래밍하는 것.
	반대로 말하면 오브젝트를 기반으로 사물을 점점 구체화 하면서 프로그래밍하는 것.

15. oop06.inter01 > LgTV, TVUser, STV, TV, Speaker, AppleSpeaker, BoseSpeaker
     oop06.inter02 > BodySign, Pitcher, BodySignTest
     oop06.inter03 > RemoteControl, RemoteTV, LgRemoteTv, RemoteTV   인터페이스의 추상메소드를 일부 구현하고,
							           나머지는 추상 메소드 그대로 두고, 추상 클래스로 만든 케이스
     oop06.inter04 > Car, Flyable, FlyingCar, FlyingCarTest         상속과 구현 모두 한 케이스
     oop06.inter05 > Flyable, Drivable, FlyingCar, FlyingCarTest   인터페이스 다중 구현 케이스
     oop06.inter06 > InterfaceA, InterfaceB, InterfaceC, InterImpl, InterfaceTest   인터페이스 끼리 상속하는 케이스
	인터페이스(Interface)
	  1) 모든 메소드가 추상 메소드고, 모든 변수는 상수다.
	  2) 인터페이스를 "구현"할 때는 implements 키워드 사용.
	  3) 인터페이스를 구현하는 하위 클래스는 추상 메소드를 하나도 빠짐없이 모두 오버라이딩 해야 한다.
	  4) 인터페이스는 동시에 다중 구현 가능
	  5) 인터페이스 끼리 상속이 가능하다. 인터페이스 끼리 다중 상속이 가능하다.

16. oop07.singleton > Singleton, SingletonTest
	싱글톤(Singleton) 패턴
	: 객체의 인스턴스가 한 번만 생성 되는 것.
	  구현 순서
	  1) 생성자를 작성하고 private으로 설정
	  2) 자기자신을 참조할 수 있는 변수를 선언 후 private static 지정
	  3) 자기자신의 인스턴스를 반환하는 게터 메소드 작성
	  4) Singleton.getInstance()으로 인스턴스 만들어서 반환받거나 만들어져 있는 인스턴스를 반환 받음





** 문제
Q9. Point3D 디폴트 생성자를 수행했을 때
     멤버필드 x, y, z를 각각 10, 20, 30으로 초기화해서 콘솔에 출력하세요. (PointTest 코드는 건드리지 않는다.)

Q10. BossSpeaker를 LgTV에 연결하고 테스트해보세요.




