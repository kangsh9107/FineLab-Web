** 2023-05-23
1. 개발환경 설정
	1) MariaDB
	   : LTS버전 중 최신. 5년간은 강제 업데이트 하지 않고 버전 유지한다는 의미.
	     https://mariadb.org/download/?t=mariadb&p=mariadb&r=11.1.0&os=windows&cpu=x86_64&pkg=msi&m=blendbyte

	2) 자바11

	3) 이클립스
	   : eclipse.ini를 notepad++로 열어서 경로 중 H를 C로 변경.

	4) notepad++

	5) mariadb connecter/j
	   : JDBC driver. java -> mariadb 접근을 돕는다.
	   : Build Path > Configure Build Path > classpath에 다운받은 jar파일 추가.
	     https://mariadb.com/downloads/connectors/connectors-data-access/java8-connector/

	6) DBeaver Community Edition
	    https://dbeaver.io/download/

2. csv파일을 활용한 대량 INSERT
	LOAD DATA INFILE 'CSV파일명'
	INTO TABLE 테이블명
	FIELDS TERMINATED BY '필드구분자문자열' 
	     OPTIONALLY ENCLOSED BY '문자'
	     ESCAPED BY '문자'
	LINES TERMINATED BY '라인구분자문자열'
	IGNORE 1 LINES
	(컬럼명, ...)

	예시1)
	load data infile 'c:/temp/departments.csv'
	into table departments
	fields terminated by ','
	lines terminated by '\r\n'
	ignore 1 lines
	(id, name);

	예시2)
	load data infile 'c:/temp/dataset3.csv'
	into table invoice
	fields terminated by ';'
		optionally enclosed by '"'
	lines terminated by '\n'
	ignore 1 lines
	(invoice_no, stock_code, description, quantity, unit_price, customer_id, country, invoice_date);

3. CISUD
	1) Create : database, table, view

	2) Insert

	3) Select : join, order by

	4) Update

	5) Delete





** 2023-05-24
4. VIEW
	1) insert, update, delete

	2) view를 통해 데이터의 수정이나 삭제를 할 수 없는 경우
		집계 함수를 사용한 뷰
		union all, join 등을 사용한 뷰
		distinct, group by 등을 사용한 뷰

5. 트리거
	delimiter $$
	CREATE TRIGGER 트리거이름
	BEFORE / AFTER 이벤트명 ON 테이블명 (이벤트 실행 전 트리거 발동, 이벤트 실행 후 트리거 발동)
	FOR EACH ROW
	BEGIN
		명령문
	END $$
	delimiter ; (delimiter는 문법의 시작과 끝을 나타냄)

6. 각종 함수
	1) in, not in, between, like, distinct, group by, with rollup, limit

	2) ifnull, length, concat, left

	3) cast, if

	4) row_number, rank, dense_rank, ntile

7. join

8. subquery

9. 샘플 데이터 가져오기
	source c:/temp/mysqlsampledatabase.sql





** 2023-05-25
10. 인덱스
	fulltext
	: innodb_ft_min_token_size=2 ## my.ini > mysqld에 추가하면 최소 검색 글자수가 2글자로 변경된다.
	: create fulltext index 인덱스명 on 테이블명(컬럼명);

	: set global innodb_ft_aux_table = 'DB명/테이블명';
	: select * from information_schema.innodb_ft_index_table; 로 인덱스를 확인 할 수 있다.

	: in boolean mode 검색
		select * from 테이블명 where match(컬럼명) against('검색어1 +검색어2' in boolean mode);
		'검색어1'을 찾되 반드시 '검색어2'가 들어가 있는 열

		select * from 테이블명 where match(컬럼명) against('검색어1 -검색어2' in boolean mode);
		'검색어1'을 찾되 '검색어2'는 안 들어가 있는 열

		select * from 테이블명 where match(컬럼명) against('검색어1 ~검색어2' in boolean mode);
		'검색어1'을 찾되 '검색어2'가 없는 열보다 '검색어2'가 있는 열이 아래 순위

		select * from 테이블명 where match(컬럼명) against('검색어1*' in boolean mode);
		'검색어1'이 들어간 부분검색 (like 대체)

		select * from 테이블명 where match(컬럼명) against("검색어1" in boolean mode);
		"검색어1"과 정확히 동일한 철자의 구문

	: 검색 중지 단어
		1) drop index movie on movie;
		   만들어져 있는 fulltext index 삭제

		2) create table user_stopword (value varchar(30));
		   중지단어를 넣을 테이블 생성. 컬럼은 value, 타입은 varchar로 해야 한다.

		3) insert into user_stopword values ('그는'), ('그리고') ... ;

		4) set global innodb_ft_server_stopword_table = 'DB명/중지테이블명';
		   모두 소문자로 작성한다.

		5) create fulltext index movie on movie(description);
		   다시 fulltext index 생성

		6) select * from information_schema.innodb_ft_index_table;
		   mysql 기본 중지 단어 + 추가한 중지단어를 제외한 인덱스 단어들이 생성되어 있는 것을 확인한다.

11. 파티션
     : MySQL 서버 입장에서는 데이터를 별도의 테이블로 분리해서 저장하지만
       사용자 입장에서는 하나의 테이블로 읽기와 쓰기를 할 수 있게 해준다.

	insert, select 성능 향상
	데이터의 물리적 저장소 분리를 통해 파티션 별로 데이터를 구분할 수 있다.

	partition by range(컬럼명) (partition 파티션명 values less than (값), ...);

12. 함수

13. 프로시져

14. 커서

15. eclipse, gradle, mariaDB, thymeleaf
	CRUD





